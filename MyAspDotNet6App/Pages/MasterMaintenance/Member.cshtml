@page
@model MyAspDotNet6App.Pages.MasterMaintenance.MemberModel
@{
    ViewData["Title"] = "メンバーマスター";
}
<form action="" method="POST">
    <div class="row">
        <div class="col-3">
            <label asp-for="SearchCondition.MemberNamePart" class="form-label"></label>
            <input asp-for="SearchCondition.MemberNamePart" type="text" class="form-control" />
        </div>
        <div class="col-3">
            <label asp-for="SearchCondition.JoinedDateFrom" class="form-label"></label>
            <input asp-for="SearchCondition.JoinedDateFrom" type="date" class="form-control" />
        </div>
        <div class="col-3">
            <label asp-for="SearchCondition.JoinedDateTo" class="form-label"></label>
            <input asp-for="SearchCondition.JoinedDateTo" type="date" class="form-control" />
        </div>
    </div>
    <input asp-for="SearchCondition.OffsetRows" type="hidden" value="0" />
    @Html.AntiForgeryToken()
</form>
<div class="row mt-2">
    <div class="d-flex flex-row">
        <button id="searchButton" class="btn btn-primary">
            <i class="bi bi-search"></i> 検索
        </button>
        <button id="clearButton" class="btn btn-primary ms-2">
            <i class="bi bi-eraser-fill"></i> クリア
        </button>
    </div>
</div>
<div class="row mt-2">
    <div id="resultMessage" class="col"></div>
</div>
<table class="table">
    <thead class="sticky-top bg-white">
        <tr>
            <th>Seq.</th>
            <th>メンバーコード</th>
            <th>氏名</th>
            <th>カナ氏名</th>
            <th>英字氏名</th>
            <th>メールアドレス</th>
            <th>着任日</th>
        </tr>
    </thead>
    <tbody id="tableBody">
    </tbody>
</table>
@section Scripts {
    <script>
        const form = document.querySelector("form");
        const offsetRowsHidden = document.querySelector("input[name='SearchCondition.OffsetRows']");
        const searchButton = document.querySelector("#searchButton");
        const clearButton = document.querySelector("#clearButton");
        const resultMessage = document.querySelector("#resultMessage");
        const tableBody = document.querySelector("#tableBody");
        searchButton.addEventListener("click", () => {
            offsetRowsHidden.setAttribute("value", "0");
            resultMessage.textContent = "件数: 0";
            tableBody.innerHTML = "";
            search();
        });
        clearButton.addEventListener("click", () => clearForm());
        form.addEventListener("keydown", (e) => {
            if (e.keyCode === 13) {
                offsetRowsHidden.setAttribute("value", "0");
                resultMessage.textContent = "件数: 0";
                tableBody.innerHTML = "";
                search();
                e.preventDefault();
            }
        });
        function search() {
            let formData = new FormData(form);
            fetch("?Handler=SearchMember", { method: "POST", body: new URLSearchParams(formData) })
                .then((response) => {
                    if (!response.ok) {
                        throw new Error("読み込みに失敗しました");
                    }
                    if (response.headers.has("X-last-seq")) {
                        offsetRowsHidden.setAttribute("value", response.headers.get("X-last-seq"));
                    }
                    let totalRecordCount = response.headers.get("X-total-records-count");
                    if (0 < totalRecordCount) {
                        resultMessage.textContent = `件数: ${totalRecordCount}`;
                    }
                    return response.text();
                })
                .then((text) => {
                    tableBody.innerHTML += text;
                })
                .catch((error) => {
                    resultMessage.innerHTML = `<div>${error}</div>`;
                });
        }
        function clearForm() {
            form.reset();
            offsetRowsHidden.setAttribute("value", "0");
            resultMessage.textContent = "";
            tableBody.innerHTML = "";
        }

        let isFetchInProgress = false;
        window.addEventListener("scroll", () => {
            const { scrollHeight, scrollTop, clientHeight } = document.documentElement;
            if (!isFetchInProgress && scrollTop + clientHeight >= scrollHeight) {
                isFetchInProgress = true;
                search();
                isFetchInProgress = false;
            }
        });

    </script>
}
