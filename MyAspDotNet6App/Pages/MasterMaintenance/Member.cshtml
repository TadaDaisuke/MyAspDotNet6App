@page
@model MyAspDotNet6App.Pages.MasterMaintenance.MemberModel
@{
    ViewData["Title"] = "メンバーマスター";
}
<form action="" method="POST">
    <div class="row">
        <div class="col-3">
            <label asp-for="SearchCondition.MemberNamePart" class="form-label"></label>
            <input asp-for="SearchCondition.MemberNamePart" type="text" class="form-control" />
        </div>
        <div class="col-3">
            <label asp-for="SearchCondition.JoinedDateFrom" class="form-label"></label>
            <input asp-for="SearchCondition.JoinedDateFrom" type="date" class="form-control" />
        </div>
        <div class="col-3">
            <label asp-for="SearchCondition.JoinedDateTo" class="form-label"></label>
            <input asp-for="SearchCondition.JoinedDateTo" type="date" class="form-control" />
        </div>
    </div>
    <input asp-for="SearchCondition.OffsetRows" type="hidden" value="0" />
    @Html.AntiForgeryToken()
</form>
<div class="row mt-2">
    <div class="d-flex flex-row">
        <button id="searchButton" class="btn btn-primary">
            <i class="bi bi-search"></i> 検索
        </button>
        <button id="clearButton" class="btn btn-primary ms-2">
            <i class="bi bi-eraser-fill"></i> クリア
        </button>
    </div>
</div>
<table class="table mt-2">
    <thead class="sticky-top bg-white">
        <tr class="border-bottom-0">
            <td id="resultMessage" colspan="7" class="border-bottom-0"></td>
        </tr>
        <tr id="tableHeader" class="d-none">
            <th>Seq.</th>
            <th>メンバーコード</th>
            <th>氏名</th>
            <th>カナ氏名</th>
            <th>英字氏名</th>
            <th>メールアドレス</th>
            <th>着任日</th>
        </tr>
    </thead>
    <tbody id="tableBody">
    </tbody>
</table>
<div id="scrollToTopButton" class="btn btn-primary btn-to-top d-none"><i class="bi bi-caret-up-fill"></i></div>
@section Scripts {
    <script>
        const form = document.querySelector("form");
        const offsetRowsHidden = document.querySelector("input[name='SearchCondition.OffsetRows']");
        const searchButton = document.querySelector("#searchButton");
        const clearButton = document.querySelector("#clearButton");
        const resultMessage = document.querySelector("#resultMessage");
        const tableHeader = document.querySelector("#tableHeader");
        const tableBody = document.querySelector("#tableBody");
        const scrollToTopButton = document.querySelector("#scrollToTopButton");
        let isFetchInProgress = false;
        let totalRecordsCount = 0;
        searchButton.addEventListener("click", () => {
            clearResult();
            fetchResultRows();
        });
        clearButton.addEventListener("click", () => {
            form.reset();
            clearResult();
        });
        scrollToTopButton.addEventListener("click", () => window.scroll({ top: 0, behavior: "smooth" }));
        form.addEventListener("keydown", (e) => {
            if (e.keyCode === 13) {
                clearResult();
                fetchResultRows();
                e.preventDefault();
            }
        });
        window.addEventListener("scroll", () => {
            const { scrollHeight, scrollTop, clientHeight } = document.documentElement;
            if (!isFetchInProgress
                && scrollHeight <= scrollTop + clientHeight
                && parseInt(offsetRowsHidden.value, 10) < totalRecordsCount) {
                fetchResultRows();
            }
            if (140 < scrollTop){
                scrollToTopButton.classList.remove("d-none");
            } else {
                scrollToTopButton.classList.add("d-none");
            }
        });
        function clearResult() {
            offsetRowsHidden.value = "0";
            totalRecordsCount = 0;
            resultMessage.textContent = "";
            tableHeader.classList.add("d-none");
            tableBody.innerHTML = "";
        }
        function fetchResultRows() {
            isFetchInProgress = true;
            let formData = new FormData(form);
            fetch("?Handler=SearchMember", { method: "POST", body: new URLSearchParams(formData) })
                .then((response) => {
                    if (!response.ok) {
                        throw new Error("読み込みに失敗しました");
                    }
                    totalRecordsCount = parseInt(response.headers.get("X-total-records-count"), 10);
                    if (offsetRowsHidden.value == 0 || 0 < totalRecordsCount) {
                        resultMessage.textContent = `件数: ${totalRecordsCount}`;
                        if (0 < totalRecordsCount) {
                            tableHeader.classList.remove("d-none");
                        }
                    }
                    if (response.headers.has("X-last-seq")) {
                        offsetRowsHidden.value = response.headers.get("X-last-seq");
                    }
                    return response.text();
                })
                .then((text) => {
                    tableBody.innerHTML += text;
                })
                .catch((error) => {
                    resultMessage.innerHTML = error;
                });
            isFetchInProgress = false;
        }
    </script>
}
